#pragma once

#include <array>
#include <iomanip>
#include <random>
#include <sstream>
#include <string>

#include "simpletorrent/Logger.h"

namespace simpletorrent {

// Generated by ChatGPT
inline std::string generate_random_client_id(size_t length) {
  static const char alphanum[] =
      "0123456789"
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      "abcdefghijklmnopqrstuvwxyz";

  std::random_device rd;
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> dist(
      0, sizeof(alphanum) -
             2);  // -2 because we don't want to include the null terminator

  std::string result(length, '\0');
  std::generate_n(result.begin(), length,
                  [&]() { return alphanum[dist(gen)]; });

  return result;
}

inline std::string hex_decode(const std::string& value) {
  int hashLength = value.length();
  std::string decodedHexString;
  for (int i = 0; i < hashLength; i += 2) {
    std::string byte = value.substr(i, 2);
    char c = (char)(int)strtol(byte.c_str(), nullptr, 16);
    decodedHexString.push_back(c);
  }
  return decodedHexString;
}

template <size_t SIZE>
inline std::string to_hex_string(const std::array<uint8_t, SIZE>& arr) {
  std::stringstream ss;
  for (const auto& byte : arr) {
    ss << std::hex << std::setw(2) << std::setfill('0')
       << static_cast<int>(byte);
  }
  return ss.str();
}

inline std::string get_filename_from_path(const std::string& path) {
  auto pos = path.find_last_of('/');
  if (pos != std::string::npos) {
    return path.substr(pos + 1);
  }
  return path;
}

[[noreturn]] inline void terminate_program() {
  LOG_CRITICAL("Stopping torrent client...");
  spdlog::shutdown();
  std::terminate();
}


inline std::string extract_host(const std::string &announce_url) {
    std::size_t host_start = announce_url.find("://");
    if (host_start == std::string::npos) {
        throw std::runtime_error("Invalid announce URL");
    }
    host_start += 3;

    std::size_t host_end = announce_url.find(':', host_start);
    if (host_end == std::string::npos) {
        host_end = announce_url.find('/', host_start);
    }

    return announce_url.substr(host_start, host_end - host_start);
}

inline std::string extract_port(const std::string &announce_url) {
    std::size_t port_start = announce_url.find(':', announce_url.find("://") + 3);
    if (port_start == std::string::npos) {
        return "80"; // Default port for HTTP
    }
    port_start++;

    std::size_t port_end = announce_url.find('/', port_start);
    return announce_url.substr(port_start, port_end - port_start);
}


}  // namespace simpletorrent